openapi: "3.0.0"
info:
  $ref: info.yml

servers:
  - url: https://devserver.yamasee-skypath.com/api
    description: Development Server
  - url: https://server.yamasee-skypath.com/api
    description: Production Server
    
tags:
  - name: general
    description: General routes to query the server version etc
  - name: auth
    description: Login with API key, Refresh JWT tokens, everything to do with authentication
  - name: map
    description: Everything to do with map view of aircraft positions and turbulence reports

paths:
  /aircraft_types:
    get:
      operationId: aircraft_types
      description: Get list of system supported aircraft types
      tags:
        - general
      responses:
        '200':
          description: A valid list of system supported aircraft types
          content:
            application/json:
              schema:
                $ref: 'types.yml#/AircraftTypesResponse'
        '401':
          description: Unauthorized
          $ref: 'responses.yml#/Unauthorized'   
        '404':
          description: The specified resource was not found
          $ref: 'responses.yml#/NotFound'       


  /settings:
    get:
      operationId: settings
      description: Get the initial recommanded settings for this user
      tags:
        - general
      security:
        - bearerAuth: []         
      responses:
        200:
          description: A valid list of system supported aircraft types
          content:
            application/json:
              schema:
                $ref: 'types.yml#/SettingsResponse'
        '401':
          $ref: 'responses.yml#/Unauthorized'   
        '404':
          description: The specified resource was not found
          $ref: 'responses.yml#/NotFound'       

  /hello:
    get:
      tags:
        - general
      operationId: hello
      description: |
        Gets basic information about SkyPath server version and minimal client version needed, if the app version is lower than the minimal 
        allowed app version the client needs to not allow login and suggest an immidiate upgrade for the user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'types.yml#/HelloResponse'
  /login:
    post:
      tags:
        - auth
      operationId: login
      description: |
        Login to the server and get a JWT token, this allows partners to exchange their API_KEY
        and user_id for a JWT token which can be user in further calls
      security:
        - apiKey : []
      requestBody:
        description: Login params
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: 'types.yml#/LoginResponse'
                
        '401':
          $ref: 'responses.yml#/Unauthorized'   
        '404':
          description: The specified resource was not found
          $ref: 'responses.yml#/NotFound'       

  /refresh_token:
    post:
      operationId: refresh
      tags:
        - auth
      description: |
        When the client first logs in it gets a JWT token and a refresh token, the JWT token has an expiry of 3 hours, when the client gets an error or even before 
        the token expires, the client needs to call this route to refresh and get new JWT token. 
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'types.yml#/RefreshTokenResponse'
        401:
          description: The refresh token is not authorized 
          $ref: 'responses.yml#/Unauthorized'   
        404:
          description: The refresh token was not found
          $ref: 'responses.yml#/NotFound'       

      requestBody:
        description: JWT refresh token 
        required: true
        content:
          application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
                    description: The refresh token client got upon login


  /initial/{company_id}/{aircraft_type}/{hours}/{delivery_token}/{delivery_token_expiry}:
    get:
      tags:
        - map
      security:
        - bearerAuth: []         
      operationId: initial
      description: | 
        Get an initial world view of the turbulence and traffic of all aircraft, client or app should call this when initializing of after 
        a period of no connectivity (5 minutes) to re-init it's internal memory to the current state. When the is connectivity the app should 
        call the /update routes to get only the diff from the last update.
      parameters:
        - in: path
          name: company_id
          schema:
            type: string
          required: true
          description: Internal Company Id
        - in: path
          name: aircraft_type
          schema:
            type: string
          required: true
          description: Type of aircraft client is flying
        - in: path
          name: hours
          schema:
            type: integer
          required: true
          description: Number of hours back for turbulence reports
        - in: path
          name: delivery_token
          schema:
            type: string
          required: true
          description: Delivery token recived in /delivery_token
        - in: path
          name: delivery_token_expiry
          schema:
            type: integer
          required: true
          description: Delivery token expiration as recived in /delivery_token_expiry
      responses:
        '200':
          description: OK
        '401':
          $ref: 'responses.yml#/Unauthorized'   
        '404':
          description: The specified resource was not found
          $ref: 'responses.yml#/NotFound'       

  /updates/{company_id}/{aircraft_type}/{skypath_tick}/{delivery_token}/{delivery_token_expiry}:
    get:
      tags:
        - map
      operationId: updates
      description: get updates since "skypath tick" to client
      security:
        - bearerAuth: [pilot]         
      parameters:
        - in: path
          name: company_id
          schema:
            type: string
            example: "UA"
          required: true
          description: Internal Company Id
        - in: path
          name: aircraft_type
          schema:
            type: string
            example: "737"
          required: true
          description: Type of aircraft client is flying
        - in: path
          name: skypath_tick
          schema:
            type: integer
            example: "708695"
          required: true
          description: last Skypath tick you got in the last succesfull get /update
        - in: path
          name: delivery_token
          schema:
            type: string
            example : "aa"
          required: true
          description: Delivery token recived in /delivery_token
        - in: path
          name: delivery_token_expiry
          schema:
            type: integer
            example: 1454655656
          required: true
          description: Delivery token expiration as recived in /delivery_token_expiry
  

      responses:
        '200':
          description: OK
        '401':
          $ref: 'responses.yml#/Unauthorized'   
        '404':
          description: The specified resource was not found
          $ref: 'responses.yml#/NotFound'       

    post:
      tags:
        - map
      operationId: updates
      description: post updates by client of aircraft position and new turbulence discovered to server
      security:
        - bearerAuth: [pilot]         

      responses:
        '200':
          description: OK
        '401':
          $ref: 'responses.yml#/Unauthorized'   
        '404':
          description: The specified resource was not found
          $ref: 'responses.yml#/NotFound'       

      requestBody:
        description: The objects to send from client to server with what changed 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequestBody'

components:

  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      description: JWT non expired token recived in response to a succesfull login request
      bearerFormat: JWT    
      
    
    apiKey:
      type: apiKey
      name: api_key
      description: API key to authorize requests. If you don't have a SkyPAth API key, contact Yamasee support
      in: header
  
  schemas:

    LoginRequest:
      description: Body for login request
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: string

    UpdateRequestBody:
      description: Update request body
      type: object
      properties:
        events:
          description: App Events that happened since last update
          $ref: '#/components/schemas/Events'
        turbulences:
          description: Turbulence Events that happened since last update
          $ref: '#/components/schemas/Turbulences'
        position:
          description: Position of the aircraft
          $ref: '#/components/schemas/Position'

    Events:
      description: Events Array
      type: array
      items:
        $ref: '#/components/schemas/Event'

    Event:
      description: Body for event
      allOf:
        - type: object
          required:
            - ts
            - type
            - meta
          properties:
            ts:
              description: timestamp (unix epoch)
              example: 140454545
              type: integer
            type: 
              description: type of events
              example: 'NO_GPS'
              type: string
            meta:
              description: Additional info about the event
              example: { "size" : 8 }
              type: object

    Turbulences:
      description: Turbulences Array
      type: array
      items:
        $ref: '#/components/schemas/Turbulence'

    Turbulence:
      description: Body for turbulence event
      allOf:
        - type: object
          required:
            - ts
            - sev
            - meta
          properties:
            ts:
              description: timestamp (unix epoch)
              example: 140454545
              type: integer
            type: 
              description: severity of turbulence
              example: 3
              type: integer
            meta:
              description: Additional info about the event
              example: { "size" : 8 }
              type: object

    Position:
      description: Aircraft Position
      allOf:
        - type: object
          required:
            - lat
            - lon
            - alt
          properties:
            lat:
              description: latitude tile
              example: 34
              type: integer
            lon: 
              description: lontitude tile 
              example: 702
              type: integer
            alt:
              description: altitude of aircraft in tiles
              example: 14
              type: integer




  
    

