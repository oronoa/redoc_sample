openapi: "3.0.0"
info:
  version: 1.1.2
  title: SkyPath Turbulence avoidance API documentation 
  description: An API for the SkyPath turbulence avoidance server Rest API in OpenAPI 3.0 specification
  termsOfService: https://yamasee.global/terms/
  contact:
    name: SkyPath API Team
    email: info@yamasee.global
    url: https://yamasee.global/api
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: "https://github.com/oronoa/redoc_sample/raw/master/logo.png"
    backgroundColor: "#FFFFFF"
    altText: "SkyPath logo"
servers:
  - url: https://server.yamasee-skypath.com/api

paths:
  /hello:
    get:
      operationId: hello
      description: Gets basic information about SkyPath server version and minimal client version
      responses:
        '200':
          description: hello response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
  /login:
    post:
      operationId: login
      description: |
        Login to the server and get a JWT token, this allows partners to exchange their API_KEY
        and user_id for a JWT token which can be user in further calls
      responses:
        '200':
          description: OK
  /initial:
    get:
      operationId: initial
      description: Get an initial world view of the turbulence and traffic of all aircraft
      responses:
        '200':
          description: OK
  /updates:
    get:
      operationId: updates
      description: get updates since "skypath tick" to client
      responses:
        '200':
          description: OK

    post:
      operationId: updates
      description: post updates by client of aircraft position and new turbulence discovered to server
      responses:
        '200':
          description: OK
  /pets:
    get:
      description: |
        Returns all pets from the system that the user has access to
        Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.

        Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
      operationId: findPets
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          style: form
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: addPet
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /pets/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: find pet by id
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      parameters:
        - name: id
          in: path
          description: ID of pet to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: pet deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:

  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT    
    
    name:
      type: apiKey
      name: api_key
      in: header
  
  schemas:
    HelloResponse:
      description: Response for hello
      allOf:
        - type: object
          required:
            - ver
            - current_app_version
            - minimal_compatible_app_version
          properties:
            ver:
              description: current server version
              type: string
            current_app_version: 
              description: current app client version
              type: string
            minimal_compatible_app_version:
              description: current minimal supported app or client version
              type: string

    Pet:
      allOf:
        - $ref: '#/components/schemas/NewPet'
        - type: object
          required:
          - id
          properties:
            id:
              type: integer
              format: int64

    NewPet:
      type: object
      required:
        - name  
      properties:
        name:
          type: string
        tag:
          type: string    

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

security:
  - bearerAuth: []         
  
    

