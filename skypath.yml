openapi: "3.0.0"
info:
  $ref: info.yml

servers:
  - url: https://devserver.yamasee-skypath.com/api
    description: Development Server
  - url: https://server.yamasee-skypath.com/api
    description: Production Server
    
tags:
  - name: general
    description: These routes are public and return general information about the system like supported aircraft types and server / client recommended versions
  - name: auth
    description: These routes allow authentication, Login with API key, Refresh JWT tokens
  - name: settings
    description: These routes allow getting the user recommended settings
  - name: map
    description: These routes deal with getting and updating the logical map view of aircraft positions and turbulence reports

paths:
  /aircraft_types:
    get:
      operationId: aircraft_types
      description: Returns a list of system supported aircraft types
      tags:
        - general
      responses:
        200:
          description: A valid list of system supported aircraft types
          content:
            application/json:
              schema:
                $ref: 'types.yml#/AircraftTypesResponse'

  /settings:
    get:
      operationId: settings
      description: Get the initial recommended settings for this user
      tags:
        - settings
      security:
        - bearerAuth: []         
      responses:
        200:
          description: An object with the user's settings for each module
          content:
            application/json:
              schema:
                $ref: 'types.yml#/SettingsResponse'
        401:
          description: User unauthorized to see settings
          $ref: 'responses.yml#/Unauthorized'   
        404:
          description: User settings not found 
          $ref: 'responses.yml#/NotFound'       

  /hello:
    get:
      tags:
        - general
      operationId: hello
      description: |
        Gets basic information about Skypath server version and minimal client version needed, 
        if the app version is lower than the minimal allowed app version the client needs to
        block logging-in and suggest the user to upgrade the Skypath app version on the device.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: 'types.yml#/HelloResponse'
  /login:
    post:
      tags:
        - auth
      operationId: login
      description: |
        Login to the server and get a authorization JWT token, this allows partners to 
        exchange their API_KEY and customer user_id for a JWT token which can be user in 
        further requests. All requests that need this token are marked as such in this
        documentation
      security:
        - apiKey : []
      requestBody:
        description: Login params
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: OK - User was authenticated
          content:
            application/json:
              schema:
                $ref: 'types.yml#/LoginResponse'
                
        401:
          description: User password wrong or user doesn't have permissions to login
          $ref: 'responses.yml#/Unauthorized'   
        404:
          description: User not found
          $ref: 'responses.yml#/NotFound'       

  /refresh_token:
    post:
      operationId: refresh
      tags:
        - auth
      description: |
        Each recived JWT token when using login has an expiry time of 3 hours, when the client
        gets an error the token expired or even before the event of the token expiring, 
        the client can call this route with the correct refresh token recived on the login route
        and get new fresh JWT token. 
      responses:
        200:
          description: OK - new token generated 
          content:
            application/json:
              schema:
                $ref: 'types.yml#/RefreshTokenResponse'
        401:
          description: The refresh token is not authorized or invalid
          $ref: 'responses.yml#/Unauthorized'   
        404:
          description: User or refresh token not found 
          $ref: 'responses.yml#/NotFound'       

      requestBody:
        description: JWT refresh token 
        required: true
        content:
          application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
                    description: The refresh token the client recived on login


  /delivery:
    get:
      tags:
        - map
      operationId: delivery
      description: | 
        The client needs to call this to get a valid CDN delivery key to be able
        to get initial state and periodic updates or the world map
      responses:
        200:
          description: OK - returns a valid delivery key
          content:
            application/json:
              schema:
                $ref: 'types.yml#/DeliveryKeyResponse'
        401:
          description: User not authorized or wrong delivery token
          $ref: 'responses.yml#/Unauthorized'   
        404:
          description: Company or Delivery token not found 
          $ref: 'responses.yml#/NotFound'       
  /initial/{company_id}/{aircraft_type}/{hours}/{delivery_token}/{delivery_token_expiry}:
    get:
      tags:
        - map
      operationId: initial
      description: | 
        Get an initial world view of the turbulence and traffic of all aircrafts according 
        to the user permissions, client or app should call this when initializing of after 
        a period of no connectivity (max 5 minutes) to re-init it's internal memory to the 
        current state. When network connectivity is stable the app should call the /update 
        routes to get only the diff from the last update every minute or so.
      parameters:
        - in: path
          name: company_id
          schema:
            type: string
          required: true
          description: Internal Company Id
        - in: path
          name: aircraft_type
          schema:
            type: string
          required: true
          description: Type of aircraft client is flying
        - in: path
          name: hours
          schema:
            type: integer
          required: true
          description: Number of hours back for turbulence reports
        - in: path
          name: delivery_token
          schema:
            type: string
          required: true
          description: Delivery token recived in /delivery_token
        - in: path
          name: delivery_token_expiry
          schema:
            type: integer
          required: true
          description: Delivery token expiration as recived in /delivery_token_expiry
      responses:
        200:
          description: OK - returns the world map turbulences and traffic for the last 6 hours
          content:
            application/json:
              schema:
                $ref: 'types.yml#/InitialResponse'
        401:
          description: User not authorized or wrong delivery token
          $ref: 'responses.yml#/Unauthorized'   
        404:
          description: Company or Delivery token not found 
          $ref: 'responses.yml#/NotFound'       

  /updates/{company_id}/{aircraft_type}/{skypath_tick}/{delivery_token}/{delivery_token_expiry}:
    get:
      tags:
        - map
      operationId: updates
      description: |
        Returns updates since and including "skypath tick" to client, client calls this route 
        every minute or so to stay in sync with the system updates of traffic positions and 
        turbulence data
      security:
        - bearerAuth: [pilot]         
      parameters:
        - in: path
          name: company_id
          schema:
            type: string
            example: "UA"
          required: true
          description: Internal Company Id
        - in: path
          name: aircraft_type
          schema:
            type: string
            example: "737"
          required: true
          description: Type of aircraft client is flying
        - in: path
          name: skypath_tick
          schema:
            type: integer
            example: "708695"
          required: true
          description: last Skypath tick you got in the last succesfull get /update
        - in: path
          name: delivery_token
          schema:
            type: string
            example : "aa"
          required: true
          description: Delivery token recived in /delivery_token
        - in: path
          name: delivery_token_expiry
          schema:
            type: integer
            example: 1454655656
          required: true
          description: Delivery token expiration as recived in /delivery_token_expiry
  

      responses:
        200:
          description: Updates to the map since and including skypath tick
          content:
            application/json:
              schema:
                $ref: 'types.yml#/UpdateResponse'
        401:
          description: User not authorized to see updates 
          $ref: 'responses.yml#/Unauthorized'   
        404:
          description: Not found
          $ref: 'responses.yml#/NotFound'       

    post:
      tags:
        - map
      operationId: updates
      description: | 
        Client POSTs updates of aircraft position and new turbulence discovered to server every minute or so
      security:
        - bearerAuth: [pilot]         

      responses:
        200:
          description: OK - Updates were recived by the server
        401:
          description: User not authorized to publish updates
          $ref: 'responses.yml#/Unauthorized'   
        404:
          description: User not found
          $ref: 'responses.yml#/NotFound'       

      requestBody:
        description: The objects to send from client to server with what changed 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequestBody'

components:

  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      description: JWT non expired token recived in response to a successful login request
      bearerFormat: JWT    
      
    
    apiKey:
      type: apiKey
      name: api_key
      description: API key to authorize requests. If you don't have a Skypath API key, contact Yamasee support
      in: header
  
  schemas:

    LoginRequest:
      description: Body for login request
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: string

    UpdateRequestBody:
      description: Update request body
      type: object
      properties:
        events:
          description: App Events that happened since last update
          $ref: '#/components/schemas/Events'
        turbulences:
          description: Turbulence Events that happened since last update
          $ref: '#/components/schemas/Turbulences'
        position:
          description: Position of the aircraft
          $ref: '#/components/schemas/Position'

    Events:
      description: Events Array
      type: array
      items:
        $ref: '#/components/schemas/Event'

    Event:
      description: Body for event
      allOf:
        - type: object
          required:
            - ts
            - type
            - meta
          properties:
            ts:
              description: timestamp (unix epoch)
              example: 140454545
              type: integer
            type: 
              description: type of events
              example: 'NO_GPS'
              type: string
            meta:
              description: Additional info about the event
              example: { "size" : 8 }
              type: object

    Turbulences:
      description: Turbulences Array
      type: array
      items:
        $ref: '#/components/schemas/Turbulence'

    Turbulence:
      description: Body for turbulence event
      allOf:
        - type: object
          required:
            - ts
            - sev
            - meta
          properties:
            ts:
              description: timestamp (unix epoch)
              example: 140454545
              type: integer
            type: 
              description: severity of turbulence
              example: 3
              type: integer
            meta:
              description: Additional info about the event
              example: { "size" : 8 }
              type: object

    Position:
      description: Aircraft Position
      allOf:
        - type: object
          required:
            - lat
            - lon
            - alt
          properties:
            lat:
              description: latitude tile
              example: 34
              type: integer
            lon: 
              description: lontitude tile 
              example: 702
              type: integer
            alt:
              description: altitude of aircraft in tiles
              example: 14
              type: integer




  
    

