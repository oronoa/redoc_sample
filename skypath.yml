openapi: "3.0.0"
info:
  version: 1.1.2
  title: SkyPath Turbulence avoidance API documentation 
  description: |
    Skypath by Yamasee is a unique service that can help airline pilots avoid clear air turbulences. This is 
    the API documentation for interacting with the SkyPath server for application developers. It describes the the SkyPath 
    turbulence avoidance server Rest API in OpenAPI 3.0 specification. You will need a partner API_KEY to be able to 
    login to the system and get authentication tokens valid for the different operations
  termsOfService: https://yamasee.global/terms/
  contact:
    name: SkyPath API Team
    email: info@yamasee.global
    url: https://yamasee.global/api
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  x-logo:
    url: "https://github.com/oronoa/redoc_sample/raw/master/logo.png"
    backgroundColor: "#FFFFFF"
    altText: "SkyPath logo"
servers:
  - url: https://devserver.yamasee-skypath.com/api
    description: Development Server
  - url: https://server.yamasee-skypath.com/api
    description: Production Server

paths:
  /refresh_token:
    post:
      operationId: refresh
      tags:
        - auth
      description: |
        When the client first logs in it gets a JWT token and a refresh token, the JWT token has an expiry of 3 hours, when the client gets an error or even before 
        the token expires, the client needs to call this route to refresh and get new JWT token. 
      responses:
        '200':
          description: OK
      requestBody:
        description: JWT refresh token 
        required: true
        content:
          application/json:
              schema:
                type: object
                required:
                  - token
                properties:
                  token:
                    type: string
                    description: The refresh token client got upon login
  /hello:
    get:
      tags:
        - general
      operationId: hello
      description: |
        Gets basic information about SkyPath server version and minimal client version needed, if the app version is lower than the minimal 
        allowed app version the client needs to not allow login and suggest an immidiate upgrade for the user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'
  /login:
    post:
      tags:
        - auth
      operationId: login
      description: |
        Login to the server and get a JWT token, this allows partners to exchange their API_KEY
        and user_id for a JWT token which can be user in further calls
      requestBody:
        description: Login params
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'   
        '404':
          $ref: '#/components/responses/NotFound'       

  /initial:
    get:
      tags:
        - world
      operationId: initial
      description: | 
        Get an initial world view of the turbulence and traffic of all aircraft, client or app should call this when initializing of after 
        a period of no connectivity (5 minutes) to re-init it's internal memory to the current state. When the is connectivity the app should 
        call the /update routes to get only the diff from the last update.
      responses:
        '200':
          description: OK
  /updates:
    get:
      tags:
        - world
      operationId: updates
      description: get updates since "skypath tick" to client
      responses:
        '200':
          description: OK

    post:
      tags:
        - world
      operationId: updates
      description: post updates by client of aircraft position and new turbulence discovered to server
      responses:
        '200':
          description: OK
      requestBody:
        description: The objects to send from client to server with what changed 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequestBody'

components:

  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT    
    
    name:
      type: apiKey
      name: api_key
      in: header
  
  schemas:

    LoginRequest:
      description: Body for login request
      type: object
      required:
        - user_id
      properties:
        user_id:
          type: string

    LoginResponse:
      description: Response for login
      type: object
      properties:
        token:
          type: string
          example: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyTmFtZSI6ImUwMTAxMDEiLCJyb2xlIjoiYWRtaW4iLCJjb21wYW55IjoiWWFtYXNlZSIsImNvbXBhbnlJbnRlcm5hbElkIjoiWVMiLCJpYXQiOjE1NzM1NzM3MDQsImV4cCI6MTYwNTEwOTcwNH0.R9S2BOVpRx6H9_0lZWKqRg93kgYweR3kN3OZonHQY4w'
        refresh_token:
          type: string
          example : 'R9S2BOVpRx6H9_0lZWKqRg93kgYweR3kN3OZonHQY4w'
        message:
          type: string
          example: 'Hello from SkyPath server'
        user_id: 
          type: string
          example : 'ym0565666'
        role:
          type: string
          example: 'pilot'
        company:
          type: string
          example : 'united airlines'
        company_id:
          type: string
          example: 'UA'
        first_name:
          type: string
          example : 'John'
        last_name:
          type: string
          example : 'Baker'
        email:
          type: string
          example: 'john.baker@skypathapi.com'


    HelloResponse:
      description: Response for hello
      allOf:
        - type: object
          required:
            - ver
            - current_app_version
            - minimal_compatible_app_version
          properties:
            ver:
              description: current server version
              example: '1.2.4'
              type: string
            current_app_version: 
              description: current app client version
              example: '4.0.0'
              type: string
            minimal_compatible_app_version:
              description: current minimal supported app or client version
              example: '3.5.1'
              type: string

    UpdateRequestBody:
      description: Update request body
      type: object
      properties:
        events:
          description: App Events that happened since last update
          $ref: '#/components/schemas/Events'
        turbulences:
          description: Turbulence Events that happened since last update
          $ref: '#/components/schemas/Turbulences'
        position:
          description: Position of the aircraft
          $ref: '#/components/schemas/Position'

    Events:
      description: Events Array
      type: array
      items:
        $ref: '#/components/schemas/Event'

    Event:
      description: Body for event
      allOf:
        - type: object
          required:
            - ts
            - type
            - meta
          properties:
            ts:
              description: timestamp (unix epoch)
              example: 140454545
              type: integer
            type: 
              description: type of events
              example: 'NO_GPS'
              type: string
            meta:
              description: Additional info about the event
              example: { "size" : 8 }
              type: object

    Turbulences:
      description: Turbulences Array
      type: array
      items:
        $ref: '#/components/schemas/Turbulence'

    Turbulence:
      description: Body for turbulence event
      allOf:
        - type: object
          required:
            - ts
            - sev
            - meta
          properties:
            ts:
              description: timestamp (unix epoch)
              example: 140454545
              type: integer
            type: 
              description: severity of turbulence
              example: 3
              type: integer
            meta:
              description: Additional info about the event
              example: { "size" : 8 }
              type: object

    Position:
      description: Aircraft Position
      allOf:
        - type: object
          required:
            - lat
            - lon
            - alt
          properties:
            lat:
              description: latitude tile
              example: 34
              type: integer
            lon: 
              description: lontitude tile 
              example: 702
              type: integer
            alt:
              description: altitude of aircraft in tiles
              example: 14
              type: integer

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

security:
  - bearerAuth: []         
  
    

